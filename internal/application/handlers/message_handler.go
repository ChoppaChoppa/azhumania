package handlers

import (
	"azhumania/internal/application/services"
	"azhumania/internal/domain/errors"
	"azhumania/internal/domain/models"
	"context"
	"fmt"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/rs/zerolog"
)

// MessageHandler ะพะฑัะฐะฑะฐััะฒะฐะตั ะฒัะพะดััะธะต ัะพะพะฑัะตะฝะธั
type MessageHandler struct {
	userService    *services.UserService
	pushupService  *services.PushupService
	commandHandler *CommandHandler
	logger         zerolog.Logger
}

// NewMessageHandler ัะพะทะดะฐะตั ะฝะพะฒัะน ะพะฑัะฐะฑะพััะธะบ ัะพะพะฑัะตะฝะธะน
func NewMessageHandler(
	userService *services.UserService,
	pushupService *services.PushupService,
	commandHandler *CommandHandler,
	logger zerolog.Logger,
) *MessageHandler {
	return &MessageHandler{
		userService:    userService,
		pushupService:  pushupService,
		commandHandler: commandHandler,
		logger:         logger,
	}
}

// Handle ะพะฑัะฐะฑะฐััะฒะฐะตั ะฒัะพะดััะตะต ัะพะพะฑัะตะฝะธะต
func (h *MessageHandler) Handle(ctx context.Context, msg *tgbotapi.Message) string {
	if msg == nil {
		return "ะัะธะฑะบะฐ: ะฟัััะพะต ัะพะพะฑัะตะฝะธะต"
	}

	// ะะพะปััะฐะตะผ ะธะปะธ ัะพะทะดะฐะตะผ ะฟะพะปัะทะพะฒะฐัะตะปั
	user, err := h.getOrCreateUser(ctx, msg)
	if err != nil {
		h.logger.Error().Err(err).Int64("telegramID", msg.From.ID).Msg("failed to get or create user")
		return "ะัะพะธะทะพัะปะฐ ะพัะธะฑะบะฐ. ะะพะฟัะพะฑัะนัะต ะฟะพะทะถะต."
	}

	// ะัะพะฒะตััะตะผ, ัะฒะปัะตััั ะปะธ ัะพะพะฑัะตะฝะธะต ะบะพะผะฐะฝะดะพะน
	if h.isCommand(msg.Text) {
		return h.handleCommand(ctx, msg.Text, user)
	}

	// ะะฑัะฐะฑะฐััะฒะฐะตะผ ะบะพะปะธัะตััะฒะพ ะพัะถะธะผะฐะฝะธะน
	return h.handlePushupCount(ctx, msg.Text, user)
}

// getOrCreateUser ะฟะพะปััะฐะตั ะธะปะธ ัะพะทะดะฐะตั ะฟะพะปัะทะพะฒะฐัะตะปั
func (h *MessageHandler) getOrCreateUser(ctx context.Context, msg *tgbotapi.Message) (*models.User, error) {
	phone := msg.From.UserName
	if phone == "" {
		phone = fmt.Sprintf("user_%d", msg.From.ID)
	}

	nickname := msg.From.FirstName
	if nickname == "" {
		nickname = "ะะพะปัะทะพะฒะฐัะตะปั"
	}

	return h.userService.GetOrCreateUser(ctx, msg.From.ID, phone, nickname)
}

// isCommand ะฟัะพะฒะตััะตั, ัะฒะปัะตััั ะปะธ ัะพะพะฑัะตะฝะธะต ะบะพะผะฐะฝะดะพะน
func (h *MessageHandler) isCommand(text string) bool {
	return strings.HasPrefix(text, "/")
}

// handleCommand ะพะฑัะฐะฑะฐััะฒะฐะตั ะบะพะผะฐะฝะดั
func (h *MessageHandler) handleCommand(ctx context.Context, command string, user *models.User) string {
	switch command {
	case "/start":
		return h.commandHandler.HandleStart(ctx, user)
	case "/help":
		return h.commandHandler.HandleHelp(ctx, user)
	case "/stats":
		return h.commandHandler.HandleStats(ctx, user)
	default:
		return h.commandHandler.HandleUnknownCommand(ctx, command)
	}
}

// handlePushupCount ะพะฑัะฐะฑะฐััะฒะฐะตั ะบะพะปะธัะตััะฒะพ ะพัะถะธะผะฐะฝะธะน
func (h *MessageHandler) handlePushupCount(ctx context.Context, text string, user *models.User) string {
	// ะะฐััะธะผ ะบะพะปะธัะตััะฒะพ ะพัะถะธะผะฐะฝะธะน
	count, err := strconv.Atoi(text)
	if err != nil {
		return "ะะพะถะฐะปัะนััะฐ, ะพัะฟัะฐะฒััะต ัะธัะปะพ ะพัะถะธะผะฐะฝะธะน (ะฝะฐะฟัะธะผะตั: 15) ะธะปะธ ะธัะฟะพะปัะทัะนัะต ะบะพะผะฐะฝะดั /help"
	}

	// ะะพะฑะฐะฒะปัะตะผ ะฟะพะดัะพะด ะพัะถะธะผะฐะฝะธะน
	session, err := h.pushupService.AddPushupApproach(ctx, user.ID, count)
	if err != nil {
		h.logger.Error().Err(err).Int64("userID", user.ID).Int("count", count).Msg("failed to add pushup approach")

		switch err {
		case errors.ErrInvalidPushupCount:
			return "ะะพะปะธัะตััะฒะพ ะพัะถะธะผะฐะฝะธะน ะดะพะปะถะฝะพ ะฑััั ะฑะพะปััะต 0"
		case errors.ErrPushupCountTooHigh:
			return "ะะพะปะธัะตััะฒะพ ะพัะถะธะผะฐะฝะธะน ะฝะต ะผะพะถะตั ะฑััั ะฑะพะปััะต 1000 ะทะฐ ัะฐะท"
		default:
			return "ะัะพะธะทะพัะปะฐ ะพัะธะฑะบะฐ ะฟัะธ ัะพััะฐะฝะตะฝะธะธ ะดะฐะฝะฝัั. ะะพะฟัะพะฑัะนัะต ะฟะพะทะถะต."
		}
	}

	// ะคะพัะผะธััะตะผ ะพัะฒะตั
	return h.formatPushupResponse(session, count)
}

// formatPushupResponse ัะพัะผะฐัะธััะตั ะพัะฒะตั ั ัะตะทัะปััะฐัะฐะผะธ ะพัะถะธะผะฐะฝะธะน
func (h *MessageHandler) formatPushupResponse(session *models.PushupSession, lastCount int) string {
	response := fmt.Sprintf("โ ะกะพััะฐะฝะตะฝะพ %d ะพัะถะธะผะฐะฝะธะน!\n\n", lastCount)
	response += "๐ ะกัะฐัะธััะธะบะฐ ะทะฐ ัะตะณะพะดะฝั:\n"
	response += fmt.Sprintf("   โข ะัะตะณะพ ะพัะถะธะผะฐะฝะธะน: %d\n", session.GetTotalCount())
	response += fmt.Sprintf("   โข ะะพะดัะพะดะพะฒ: %d\n", session.GetApproachCount())
	response += fmt.Sprintf("   โข ะกัะตะดะฝะตะต ะทะฐ ะฟะพะดัะพะด: %.1f\n", session.GetAveragePerApproach())

	// ะะพะฑะฐะฒะปัะตะผ ะผะพัะธะฒะฐัะธั
	response += h.getMotivationMessage(session.GetTotalCount())

	return response
}

// getMotivationMessage ะฒะพะทะฒัะฐัะฐะตั ะผะพัะธะฒะฐัะธะพะฝะฝะพะต ัะพะพะฑัะตะฝะธะต
func (h *MessageHandler) getMotivationMessage(totalCount int) string {
	switch {
	case totalCount > 100:
		return "\n๐ฅ ะะตะฒะตัะพััะฝะพ! ะั ะฝะฐััะพััะธะน ัะตะผะฟะธะพะฝ!"
	case totalCount > 50:
		return "\n๐ฅ ะัะปะธัะฝะฐั ัะฐะฑะพัะฐ! ะัะพะดะพะปะถะฐะนัะต ะฒ ัะพะผ ะถะต ะดััะต!"
	case totalCount > 20:
		return "\n๐ช ะฅะพัะพัะธะน ัะตะทัะปััะฐั! ะะพะถะตัะต ะฑะพะปััะต!"
	default:
		return "\n๐ ะะฐัะธะฝะฐะตะผ! ะะฐะถะดัะน ะฟะพะดัะพะด ะฒะฐะถะตะฝ!"
	}
}
